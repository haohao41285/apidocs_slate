---
title: Test API Reference

language_tabs: # must be one of https://git.io/vQNgJ
  - shell: cURL
  - ruby: Ruby
  - python: Python
  - javascript: Javascript
  - php: PHP

toc_footers:
  - "<span class='text-primary'>Address</span>: 8th floor, HBT Building, 456 Hai Ba Trung St., Tan Dinh Ward, Dist. 1, Ho Chi Minh City, Vietnam"
  - "<span class='text-primary'>Supporter</span>: Mr. Minh, Do Sang"
  - "<span class='text-primary'>Email</span>: minh.do@vietguys.biz"
  - "<span class='text-primary'>Mobile</span>: 84-908176769"
  - "<span class='text-primary'>Tel</span>: 84-8-7300 8027"
  - "<span class='text-primary'>Skype</span>: dosangminh"

search: true

code_clipboard: true
---
<% response_brand = t(:response_brand) || [] %>
# <%= t(:menu_1) %>

<p class="content_menu"><%= t(:menu_1_content_1) %></p>
<p class="content_menu"><%= t(:menu_1_content_2) %></p>
<p class="content_menu"><%= t(:menu_1_content_3) %></p>

# <%= t(:menu_2) %>
## <%= t(:menu_2_1) %>

> To authorize, use this code:

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here"
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
```

> The above command returns CODE like this:

```text
  <% response_brand.each do |res| %>
  <%= res %>
  <% end %>
```

<%= t(:menu_2_1_content) %>

### <%= t(:http_request) %>

`POST <%= t(:menu_2_1_http) %>`
### <%= t(:query_parameter) %>

<%= t(:menu_2_1_params) %>


<!-- ONE WAY -->
## <%= t(:menu_2_2) %>

> To authorize, use this code:

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here"
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
```

> The above command returns CODE or JSON like this:

```text
  -1: Missing required parameter(s)
  -2: Server is busy, try again later
  -3: SMS account is not found
  -4: SMS account has been locked
  -5: Authentication failed
  -6: API has been disabled
  -7: Access denied from this IP address
  -8: Brandname hasn't been registered
  -9: Out of credits
  -10: Invalid mobile number
  -11: Blacklist mobile number
  -12: Out of credits
  -13: Brandname hasn't been registered
  -14: Characters exceed 459 characters (long message error).
  -16: Duplicate mobile number, brandname, text message in 01
  minutes
  -18: Content contains advertising keywords
  -17: Exceeds the limit of one-day limited-number messages defined by
  the customer
  -20: Template hasn't been registered
  -21: The content of text message is not OTP
  -22: MNP error or invalid brand name
   ID: Successfully sent, return an unique ID 

```
> If returns JSON structured like this:
```
```

```json
[
  {
    "carrier":"mobifone",
    "error":0,
    "msgid":"995.84908176769.1ec857f40850f4b",
    "log":"Gui thanh cong"
  }
]
```
```text
  error:  0 is successfully, 1 is error
  msgid:  ID of the message
  log:  Describe errors if any
  carrier:  Network of current number
```

<%= t(:menu_2_2_content) %>
###<%= t(:http_request) %>

### <%= t(:http_request) %>

With SSL(<b>recommended</b>): `GET/POST <%= t(:menu_2_2_http_ssl) %>`<br>
Without SSL: `GET/POST <%= t(:menu_2_2_http_without_ssl) %>`
### <%= t(:query_parameter) %>

<%= t(:menu_2_2_params) %>
###<%= t(:menu_2_2_report) %>

Mehthod: <%= t(:menu_2_2_report_method) %><br>
<%= t(:menu_2_2_report_params) %>

<!-- END ONEWAY -->

<!-- TWO WAY -->

## <%= t(:menu_2_3) %>

> To authorize, use this code:

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here"
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
```

> The above command returns CODE or JSON like this:

```text
  -1: Missing required parameter(s)
  -2: Server is busy, try again later
  -3: SMS account is not found
  -4: SMS account has been locked
  -5: Authentication failed
  -6: API has been disabled
  -7: Access denied from this IP address
  -8: Brandname hasn't been registered
  -9: Out of credits
  -10: Invalid mobile number
  -11: Blacklist mobile number
  -12: Out of credits
  -13: Brandname hasn't been registered
  -14: Characters exceed 459 characters (long message error).
  -16: Duplicate mobile number, brandname, text message in 01
  minutes
  -18: Content contains advertising keywords
  -17: Exceeds the limit of one-day limited-number messages defined by
  the customer
  -20: Template hasn't been registered
  -21: The content of text message is not OTP
  -22: MNP error or invalid brand name
   ID: Successfully sent, return an unique ID 

```
> If returns JSON structured like this:
```
```

```json
[
  {
    "carrier":"mobifone",
    "error":0,
    "msgid":"995.84908176769.1ec857f40850f4b",
    "log":"Gui thanh cong"
  }
]
```
```text
  error:  0 is successfully, 1 is error
  msgid:  ID of the message
  log:  Describe errors if any
  carrier:  Network of current number
```

<%= t(:menu_2_3_content) %>
###<%= t(:http_request) %>

### <%= t(:http_request) %>

With SSL(<b>recommended</b>): `GET/POST <%= t(:menu_2_3_http_ssl) %>`<br>
Without SSL: `GET/POST <%= t(:menu_2_3_http_without_ssl) %>`
### <%= t(:query_parameter) %>

<%= t(:menu_2_3_params) %>
###<%= t(:menu_2_3_report) %>

Mehthod: <%= t(:menu_2_3_report_method) %><br>
<%= t(:menu_2_3_report_params) %>

<!-- END TWO WAY -->

<!-- TopUp -->
## <%= t(:menu_2_4) %>

> To authorize, use this code:

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here"
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
```

> The above command returns CODE or JSON like this:

```text
  00: Successfully
  01: Server Vietguys's busy
  02: The input information has not been fully entered.
  03: Account does not exist
  04: Phone number is not correct
  05: Account is locked.
  06: Authentication information is not correct
  07: Querying from undeclared IP address
  08: Invalid topup denomination value.
  09: Duplicate transaction code id (do not check default, must report IT settings)
  10: Account topup credit end.
```

<%= t(:menu_2_4_content) %>

### <%= t(:http_request) %>

With SSL(<b>recommended</b>): `GET/POST <%= t(:menu_2_4_http_ssl) %>`<br>
Without SSL: `GET/POST <%= t(:menu_2_4_http_without_ssl) %>`
### <%= t(:query_parameter) %>

<%= t(:menu_2_4_params) %>
### <%= t(:menu_2_4_report) %>
<%= t(:menu_2_4_report_params) %>

<!-- End TopUp -->

<!-- OTT -->
## <%= t(:menu_2_5) %>

> To authorize, use this code:

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here"
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
```

> The above command returns CODE or JSON like this:

```text
  -1: Not passed in full parameters
  -3: The user account could not be found
  -4: Account is locked
  -7: Access restricted IP
  -8: Brand name has not been declared
  -10: Phone number is not correct
```
> If returns JSON structured like this:
```
```

```json
  [
    {
      "error":0,
      "error_code":0,
      "msgid":"9876543.1234567.37d7dd0c5ea6ccf",
      "log":"Gui thanh cong"
    }
  ]
```
```text
  error:  0 is successfully, 1 is error
  msgid:  ID of the message
  log:  Describe errors if any
  carrier:  Network of current number
```

<%= t(:menu_2_5_content) %>

### <%= t(:http_request) %>

With SSL(<b>recommended</b>): `GET/POST <%= t(:menu_2_5_http_ssl) %>`<br>
Without SSL: `GET/POST <%= t(:menu_2_5_http_without_ssl) %>`
### <%= t(:query_parameter) %>

<%= t(:menu_2_5_params) %>

<aside class="warning">
(*) Note with 03 parameters actiontext, actionlink, viberimg if using 03 simultaneous use or the system will return an error. 02 parameters actionlink, viberimg can run the FILTER_URL test function to return an error (if the path structure is wrong)
</aside>

<!-- End TopUp -->